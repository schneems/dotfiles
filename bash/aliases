# Use `cargo doc --check` when stabalized: https://github.com/rust-lang/cargo/issues/10025
alias "doc"='RUSTDOCFLAGS="-D warnings" cargo doc --all-features --document-private-items --no-deps'

# Uses cargo limit https://github.com/alopatindev/cargo-limit
alias "cw"="bacon test"
alias "cwc"="cargo watch -c -x ltest -x clippy"
alias "cwstd"=" cargo watch -c --shell "./x.py test library/std""
alias "jup"="jupyter notebook --browser any"

function pbash {
  local imagename="$1"

  # Check if imagename is still empty
  if [ -z "$imagename" ]; then
    echo "No image name given. Available images:"
    docker images --format table
    return 1
  fi

  # Construct and execute the docker command
  echo "\$ docker run -it --rm --entrypoint='/cnb/lifecycle/launcher' $imagename bash"
  docker run -it --rm --entrypoint='/cnb/lifecycle/launcher' "$imagename" bash || {
    echo "No such image found: '$imagename'. Available images:"
    echo ""
    docker images --format table
    return 1
  }
}

# Toggle between custom prompt on/off for the purposes of copy/paste
function demo {
  if [ -z "$OLDPROMPT" ]; then
    export OLDPROMPT="$PROMPT"
    export PROMPT="\$ "
  else
    export PROMPT="$OLDPROMPT"
    unset OLDPROMPT
  fi
}

function hellopuma {
    mktmpdir
    cat <<EOF > Gemfile
source "https://rubygems.org"

gem "puma"
gem "rack"
EOF
cat <<EOF > config.ru
require 'rack'

response = ['200', {'Content-Type' => 'text/html'}, ['Hello, World!']]
app = Proc.new do |env|
  sleep 0.2
  response
end

run app
EOF
bundle install
}

function pip() {
  echo "use pip3 instead"
}
alias rake='noglob rake' # www.mikeballou.com/blog/2011/07/18/zsh-and-rake-parameters/, https://github.com/ohmyzsh/ohmyzsh/issues/433

function dockboot() {
  APP="/Applications/Docker.app"
  if docker version &> /dev/null; then
    echo "Docker is booted"
  else
    echo "Booting docker"
    open $APP || { echo "Failed"; return 1 }
  fi
}

function dockwait() {
    dockboot
    while ! docker version &> /dev/null
    do
        printf "."
        sleep 1
    done
    echo "Docker is booted"
}

function rofl() {
  CMDS=(dockboot)
  CMDS+=("cargo fmt")
  CMDS+=("cargo clippy --all-targets --all-features -- --deny warnings")
  CMDS+=("dockwait")
  CMDS+=("time cargo test -- --ignored")
  CMDS+=("git status")
  CMDS+=("git status --porcelain")

  echo "## All commands"
  echo
  for value in "${CMDS[@]}"
  do
    echo "\$ $value"
  done
  echo

  echo "## Running"
  echo
  for value in "${CMDS[@]}"
  do
    echo "\$ $value"
    eval "$value" || return 1
    echo
  done
}

function ij() {
        local args="$@"
        if [[ $# == 0 ]]; then
                args=$(pwd)

        elif [[ $# == 1 && "${1}" != /* ]]; then
                args="$(pwd)/${1}"
        fi

        open -na "IntelliJ IDEA CE.app" --args "$args"
}

# Copies last command from history, excluding itself
function hh() {
  history | grep -v "hh" | tail -1 | head -1 | cut -c8-999 | pbcopy; echo "Copied: $(pbpaste)"
}
alias hs='heroku sudo'

function fast() {
  bundle exec rspec --tag \~slow $@ && bundle exec rspec --tag slow $@
}
alias asbot='~/Documents/projects/badger/bin/asbot'
alias badger='~/Documents/projects/badger/bin/badger'
alias gitx.='gitx .'
alias vim.='vim .'
alias empty='git commit --allow-empty -m empty'
alias yeet='git push heroku main || git push heroku master'
alias utc='TZ="UTC" date '

alias fff="bundle exec rspec --only-failures"

function sup
{
  echo 'require "objspace"; ObjectSpace.trace_object_allocations_start; Kernel.send(:define_method, :sup) do |obj| ;   puts "#{ ObjectSpace.allocation_sourcefile(obj) }:#{ ObjectSpace.allocation_sourceline(obj) }"; end' > /tmp/tmp-gemfile
  cat Gemfile >> /tmp/tmp-gemfile
  cat /tmp/tmp-gemfile > Gemfile
}

function acab {
  if [ -x "$(git remote | grep upstream)" ]; then
    git pull --rebase upstream main || git pull --rebase upstream master
  else
    git pull --rebase origin main || git pull --rebase origin master
  fi
}

alias subl='vim'

alias prs='hub pr list -f "%au %H %U%n" | grep schneems | column -t'

function drun {
  docker run -it --rm $1 bash
}

alias rbuildpack="heroku buildpacks:remove heroku/ruby; heroku buildpacks:add https://github.com/heroku/heroku-buildpack-ruby"

function debugapp {
  mktmpdir
  hs repo:clone -a $1
  cd $1
  git rrh
  git co support
  heroku create
  heroku buildpacks:set https://github.com/ryandotsmith/null-buildpack
  git push heroku support:master || git push heroku master || git push heroku main
  heroku buildpacks:clear
  empty
}

function mktmpdir {
  cd /tmp
  dir_name=$(ruby -e "require 'securerandom'; puts SecureRandom.hex")
  mkdir $dir_name
  cd $dir_name
  echo "$ mkdir -p /tmp/$dir_name; cd /tmp/$dir_name"
}

function reproapp {
  mktmpdir
  echo "source 'https://rubygems.org'" > Gemfile
  echo "gem 'rake'" >> Gemfile
  bundle install
  bundle lock --add-platform x86_64-linux --add-platform ruby
  git init .
  git add .
  git commit -m first
  heroku create
}

# notifyme
function amdone {
  if [ $? -eq 0 ]
  then
    afplay /System/Library/Sounds/Submarine.aiff
  else
    afplay /System/Library/Sounds/Blow.aiff
  fi
}

# https://gist.github.com/napcs/8e640df0e8abfe047e6b8c048a14470e
notify() {
  if [ $? -eq 0 ]; then
    osascript -e 'display notification "The command worked" with title "Success"'
  else
    osascript -e 'display notification "The command failed" with title "Failed"'
  fi
}

alias hbr='proj; cd heroku-buildpack-ruby'
alias h='heroku'
alias be='bundle exec'
alias b='bundle exec'
alias dbundle='ruby -I /Users/rschneeman/Documents/projects/rubygems/bundler/lib /Users/rschneeman/Documents/projects/rubygems/bundler/exe/bundle'

function ruby_19_hash {
  find . -name $1 -exec perl -p -i -e 's/([^:]):(\w+)\s*=>/\1\2:/g' {} \;
}

# Command Enhancements

alias rm=trash

alias start_redis='redis-server /usr/local/etc/redis.conf &'
alias start_postgres='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias start_cassandra='cassandra -f'
alias start_memcached='launchctl load -w /usr/local/Cellar/memcached/1.4.5/com.danga.memcached.plist'
alias start_mysql='launchctl load -w /usr/local/Cellar/mysql/5.1.49/com.mysql.mysqld.plist'

alias console='name_tab console; pry' # https://github.com/pry/pry/wiki/Setting-up-Rails-to-use-Pry
alias server='rails s thin'

alias wp='cd ~/Sites/public'

alias hurl='name_tab hurl; proj; cd hurl; bundle exec shotgun config.ru'

alias proj='cd ~/Documents/projects'
alias work='cd ~/Documents/projects/work'

alias hist='puts Readline::HISTORY.entries.split("exit").last[0..-2].join("\n")'


# Utility
alias reload!='source ~/bin/dotfiles/bashrc'
alias ea='mate -w ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="mate ~/bin/dotfiles/bash/env"

## custom tab name ###
function name_tab {
  echo -n -e "\033]0;$1\007"
}

## Git Autocomplete ##

# _complete_git() {
#   if [ -d .git ]; then
#     branches=`git branch -a | cut -c 3-`
#     tags=`git tag`
#     cur="${COMP_WORDS[COMP_CWORD]}"
#     COMPREPLY=( $(compgen -W "${branches} ${tags}" -- ${cur}) )
#   fi
# }
# complete -F _complete_git git checkout


# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# Git
alias co="checkout"
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='mate .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}
