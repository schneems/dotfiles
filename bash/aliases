alias be='bundle exec'


function ruby_19_hash {
  find . -name $1 -exec perl -p -i -e 's/([^:]):(\w+)\s*=>/\1\2:/g' {} \;
}

# Command Enhancements

alias rm=trash

alias start_redis='redis-server /usr/local/etc/redis.conf &'
alias start_postgres='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias start_cassandra='cassandra -f'
alias start_memcached='launchctl load -w /usr/local/Cellar/memcached/1.4.5/com.danga.memcached.plist'
alias ud='cd ~/documents/projects/united-dictionary'
alias start_mysql='launchctl load -w /usr/local/Cellar/mysql/5.1.49/com.mysql.mysqld.plist'


alias console='name_tab console; pry' # https://github.com/pry/pry/wiki/Setting-up-Rails-to-use-Pry
alias server='rails s thin'

alias octave="/Applications/Octave.app/Contents/Resources/bin/octave;"
alias wp='cd ~/Sites/public'

alias hurl='name_tab hurl; proj; cd hurl; bundle exec shotgun config.ru'

alias pf='cd ~/documents/projects/potential_friend_finder'

alias anti='cd ~/documents/presentations/thoughtbot-workshop_slides/rails-antipatterns'
alias proj='cd ~/documents/projects'
alias hero='cd ~/documents/projects/heroku'


alias go='cd ~/documents/projects/gowalla-rails'
alias rr='name_tab routes; rake routes | mate'
alias mod='cd ~/documents/projects/hacketyHack/modesty'

alias bacon="cd ~/documents/projects/baconalytics"
alias go:boot='go; lunchy start postgres; lunchy start redis; lunchy start cassandra; lunchy start memcached; go:solr; go:cl'
alias go:sleep='lunchy stop postgres; lunchy stop redis; lunchy stop cassandra; lunchy stop memcached'
alias go:unicorn='name_tab go:server ; go ; bundle exec unicorn_rails -c local/unicorn.conf'
alias go:spork='name_tab go:spork ; go ; spork'
alias go:staging='ssh root@ec2-184-72-88-222.compute-1.amazonaws.com'
alias go:console='go; console'
alias go:guard='go; name_tab go:guard; guard'
alias go:cl:test='go; name_tab go:chronologic; bundle exec rackup -p 9292 local/chronologic_test.ru'
alias go:cl='go; name_tab go:chronologic; bundle exec rackup -p 9292 local/chronologic.ru'

alias go:bl='go; name_tab go:server ; compass compile; BRUCELEE_WEB=true bundle exec unicorn_rails -c local/unicorn.conf'
alias go:solr='go; rake sunspot:solr:start'


alias hour='proj; cd hourschool'
alias go:log="name_tab go:log && go && tail -f log/development.log"

alias ga='cd ~/documents/projects/android/gowalla-android'

alias sl='cd ~/documents/projects/stats-logger'

alias why='cd ~/documents/projects/whyspam'
alias ss="script/server"
alias rs="rails server"
alias hadouken="git pull --rebase && git push origin master"

alias hist="puts Readline::HISTORY.entries.split("exit").last[0..-2].join("\n")"


# Utility
alias reload!='source ~/bin/dotfiles/bashrc'
alias ea='mate -w ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="mate ~/bin/dotfiles/bash/env"


## default tab name ##
PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'

## custom tab name ###
function name_tab {
  echo -n -e "\033]0;$1\007"
}

## RVM & GIT Repo name in Terminal
[[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion # for RVM completion
if [ -f `brew --prefix`/etc/bash_completion.d/git-completion.bash ]; then source `brew --prefix`/etc/bash_completion.d/git-completion.bash; fi # for Git completion


## Git Autocomplete ##

_complete_git() {
  if [ -d .git ]; then
    branches=`git branch -a | cut -c 3-`
    tags=`git tag`
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${branches} ${tags}" -- ${cur}) )
  fi
}
complete -F _complete_git git checkout


# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# General code

# From Chris Wanstrath
function pless() {
    pygmentize $1 | less -r
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Mercurial hg
function new-hg() {
    ssh hg@example.com "hg init $1"
    hg clone ssh://hg@example.com/$1
}

# Git
alias co="checkout"
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='mate .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() {
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $*
}

alias ox="open *.xcodeproj"

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
